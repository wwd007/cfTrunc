% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conformal_pred.R
\name{conformal_pred}
\alias{conformal_pred}
\title{Conformal prediction for truncated time-to-event data}
\usage{
conformal_pred(
  data_tr,
  data_ca,
  data_te,
  X = "X",
  Z = "Z",
  L = "L",
  R = "R",
  delta = "delta",
  trunc_type = "left",
  cencoring = "right",
  target = "RMST",
  tau = NA,
  model = "cox",
  lin_pred = FALSE,
  alpha = 0.1
)
}
\arguments{
\item{data_tr}{training data set}

\item{data_ca}{calibration data set}

\item{data_te}{test data set}

\item{X}{variable name for observed event time}

\item{Z}{vector of variable names for covariates}

\item{L}{variable name for left truncation time}

\item{R}{variable name for right truncation time}

\item{delta}{variable name for event indicator}

\item{trunc_type}{truncation type: left, right, or double}

\item{cencoring}{censoring type: right}

\item{target}{MST or RMST}

\item{tau}{used when targeting for RMST}

\item{model}{main model, cox or aft}

\item{lin_pred}{whether to output linear predictors from the main model}

\item{alpha}{prespecified uncertainty level, default is 0.1}
}
\value{
a data frame with 3 columns: y_pred, y_pred_hi, y_pred_lo
}
\description{
Conformal prediction for truncated time-to-event data
}
\examples{
# generate data
set.seed(42)
N <- 1000
Z <- runif(N)
X <- exp(Z)
C <- rexp(N)
L <- rgamma(N, 0.25, 0.25)
dat <- data.frame(X, Z, C, L)
dat$delta <- as.integer(dat$X > dat$C)
dat$X <- pmin(dat$X, dat$C)
dat <- dat[dat$L < dat$X, ]
dat_tr <- dat[1:(nrow(dat) \%/\% 2), ]
dat_ca <- dat[(nrow(dat) \%/\% 2 + 1):nrow(dat), ]
tau <- quantile(c(dat_tr$X), 0.9)

N_te <- 500
Z <- runif(N_te)
X <- exp(Z)
C <- rexp(N_te)
L <- rgamma(N_te, 1, 1)
dat_te <- data.frame(X, Z, C, L)
dat_te$delta <- as.integer(dat_te$X > dat_te$C)
# conformal prediction
pred <- conformal_pred(dat_tr, dat_ca, dat_te,
                      X = "X", Z = c("Z"), L = "L", delta = "delta",
                      trunc_type = "left", target = "RMST",
                      tau = tau, model = "aft", alpha = 0.1)
# calculate coverage
coverage <- mean(pred$y_pred_hi > pmin(dat_te$X, tau) &
                  pred$y_pred_lo < pmin(dat_te$X, tau))
print(paste0("The coverage rate is ",coverage*100,"\%."))

}
